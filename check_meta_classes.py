#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Meta –∫–ª–∞—Å—Å–æ–≤ –≤ –º–æ–¥–µ–ª—è—Ö Django
"""

import os
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'online_store.settings')
django.setup()

from catalog.models import Category, Product

def check_meta_classes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Meta –∫–ª–∞—Å—Å–æ–≤ –≤ –º–æ–¥–µ–ª—è—Ö"""
    print("=" * 50)
    print("–ü–†–û–í–ï–†–ö–ê META –ö–õ–ê–°–°–û–í –í –ú–û–î–ï–õ–Ø–•")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ Category
    print("\nüìÅ –ú–û–î–ï–õ–¨ Category:")
    print(f"  verbose_name: '{Category._meta.verbose_name}'")
    print(f"  verbose_name_plural: '{Category._meta.verbose_name_plural}'")
    print(f"  ordering: {Category._meta.ordering}")
    print(f"  –ü–æ–ª—è: {[field.name for field in Category._meta.fields]}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ Product
    print("\nüì¶ –ú–û–î–ï–õ–¨ Product:")
    print(f"  verbose_name: '{Product._meta.verbose_name}'")
    print(f"  verbose_name_plural: '{Product._meta.verbose_name_plural}'")
    print(f"  ordering: {Product._meta.ordering}")
    print(f"  –ü–æ–ª—è: {[field.name for field in Product._meta.fields]}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π
    print("\nüîó –°–í–Ø–ó–ò –ú–ï–ñ–î–£ –ú–û–î–ï–õ–Ø–ú–ò:")
    category_field = Product._meta.get_field('category')
    print(f"  Product.category -> {category_field.related_model.__name__}")
    print(f"  related_name: '{category_field.related_name}'")
    
    print("\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("=" * 50)

def test_ordering():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    print("\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–†–¢–ò–†–û–í–ö–ò:")
    
    # –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = Category.objects.all()
    print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ name): {list(categories.values_list('name', flat=True))}")
    
    # –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
    products = Product.objects.all()
    print(f"  –¢–æ–≤–∞—Ä—ã (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ -created_at): {list(products.values_list('name', 'created_at', flat=True))}")

if __name__ == "__main__":
    try:
        check_meta_classes()
        test_ordering()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã") 